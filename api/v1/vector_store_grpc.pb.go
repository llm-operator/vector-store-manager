// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VectorStoreServiceClient is the client API for VectorStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VectorStoreServiceClient interface {
	CreateVectorStore(ctx context.Context, in *CreateVectorStoreRequest, opts ...grpc.CallOption) (*VectorStore, error)
	ListVectorStores(ctx context.Context, in *ListVectorStoresRequest, opts ...grpc.CallOption) (*ListVectorStoresResponse, error)
	GetVectorStore(ctx context.Context, in *GetVectorStoreRequest, opts ...grpc.CallOption) (*VectorStore, error)
	UpdateVectorStore(ctx context.Context, in *UpdateVectorStoreRequest, opts ...grpc.CallOption) (*VectorStore, error)
	DeleteVectorStore(ctx context.Context, in *DeleteVectorStoreRequest, opts ...grpc.CallOption) (*DeleteVectorStoreResponse, error)
	CreateVectorStoreFile(ctx context.Context, in *CreateVectorStoreFileRequest, opts ...grpc.CallOption) (*VectorStoreFile, error)
	ListVectorStoreFiles(ctx context.Context, in *ListVectorStoreFilesRequest, opts ...grpc.CallOption) (*ListVectorStoreFilesResponse, error)
	GetVectorStoreFile(ctx context.Context, in *GetVectorStoreFileRequest, opts ...grpc.CallOption) (*VectorStoreFile, error)
	DeleteVectorStoreFile(ctx context.Context, in *DeleteVectorStoreFileRequest, opts ...grpc.CallOption) (*DeleteVectorStoreFileResponse, error)
}

type vectorStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVectorStoreServiceClient(cc grpc.ClientConnInterface) VectorStoreServiceClient {
	return &vectorStoreServiceClient{cc}
}

func (c *vectorStoreServiceClient) CreateVectorStore(ctx context.Context, in *CreateVectorStoreRequest, opts ...grpc.CallOption) (*VectorStore, error) {
	out := new(VectorStore)
	err := c.cc.Invoke(ctx, "/llmoperator.vector_store.v1.VectorStoreService/CreateVectorStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorStoreServiceClient) ListVectorStores(ctx context.Context, in *ListVectorStoresRequest, opts ...grpc.CallOption) (*ListVectorStoresResponse, error) {
	out := new(ListVectorStoresResponse)
	err := c.cc.Invoke(ctx, "/llmoperator.vector_store.v1.VectorStoreService/ListVectorStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorStoreServiceClient) GetVectorStore(ctx context.Context, in *GetVectorStoreRequest, opts ...grpc.CallOption) (*VectorStore, error) {
	out := new(VectorStore)
	err := c.cc.Invoke(ctx, "/llmoperator.vector_store.v1.VectorStoreService/GetVectorStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorStoreServiceClient) UpdateVectorStore(ctx context.Context, in *UpdateVectorStoreRequest, opts ...grpc.CallOption) (*VectorStore, error) {
	out := new(VectorStore)
	err := c.cc.Invoke(ctx, "/llmoperator.vector_store.v1.VectorStoreService/UpdateVectorStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorStoreServiceClient) DeleteVectorStore(ctx context.Context, in *DeleteVectorStoreRequest, opts ...grpc.CallOption) (*DeleteVectorStoreResponse, error) {
	out := new(DeleteVectorStoreResponse)
	err := c.cc.Invoke(ctx, "/llmoperator.vector_store.v1.VectorStoreService/DeleteVectorStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorStoreServiceClient) CreateVectorStoreFile(ctx context.Context, in *CreateVectorStoreFileRequest, opts ...grpc.CallOption) (*VectorStoreFile, error) {
	out := new(VectorStoreFile)
	err := c.cc.Invoke(ctx, "/llmoperator.vector_store.v1.VectorStoreService/CreateVectorStoreFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorStoreServiceClient) ListVectorStoreFiles(ctx context.Context, in *ListVectorStoreFilesRequest, opts ...grpc.CallOption) (*ListVectorStoreFilesResponse, error) {
	out := new(ListVectorStoreFilesResponse)
	err := c.cc.Invoke(ctx, "/llmoperator.vector_store.v1.VectorStoreService/ListVectorStoreFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorStoreServiceClient) GetVectorStoreFile(ctx context.Context, in *GetVectorStoreFileRequest, opts ...grpc.CallOption) (*VectorStoreFile, error) {
	out := new(VectorStoreFile)
	err := c.cc.Invoke(ctx, "/llmoperator.vector_store.v1.VectorStoreService/GetVectorStoreFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorStoreServiceClient) DeleteVectorStoreFile(ctx context.Context, in *DeleteVectorStoreFileRequest, opts ...grpc.CallOption) (*DeleteVectorStoreFileResponse, error) {
	out := new(DeleteVectorStoreFileResponse)
	err := c.cc.Invoke(ctx, "/llmoperator.vector_store.v1.VectorStoreService/DeleteVectorStoreFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VectorStoreServiceServer is the server API for VectorStoreService service.
// All implementations must embed UnimplementedVectorStoreServiceServer
// for forward compatibility
type VectorStoreServiceServer interface {
	CreateVectorStore(context.Context, *CreateVectorStoreRequest) (*VectorStore, error)
	ListVectorStores(context.Context, *ListVectorStoresRequest) (*ListVectorStoresResponse, error)
	GetVectorStore(context.Context, *GetVectorStoreRequest) (*VectorStore, error)
	UpdateVectorStore(context.Context, *UpdateVectorStoreRequest) (*VectorStore, error)
	DeleteVectorStore(context.Context, *DeleteVectorStoreRequest) (*DeleteVectorStoreResponse, error)
	CreateVectorStoreFile(context.Context, *CreateVectorStoreFileRequest) (*VectorStoreFile, error)
	ListVectorStoreFiles(context.Context, *ListVectorStoreFilesRequest) (*ListVectorStoreFilesResponse, error)
	GetVectorStoreFile(context.Context, *GetVectorStoreFileRequest) (*VectorStoreFile, error)
	DeleteVectorStoreFile(context.Context, *DeleteVectorStoreFileRequest) (*DeleteVectorStoreFileResponse, error)
	mustEmbedUnimplementedVectorStoreServiceServer()
}

// UnimplementedVectorStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVectorStoreServiceServer struct {
}

func (UnimplementedVectorStoreServiceServer) CreateVectorStore(context.Context, *CreateVectorStoreRequest) (*VectorStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVectorStore not implemented")
}
func (UnimplementedVectorStoreServiceServer) ListVectorStores(context.Context, *ListVectorStoresRequest) (*ListVectorStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVectorStores not implemented")
}
func (UnimplementedVectorStoreServiceServer) GetVectorStore(context.Context, *GetVectorStoreRequest) (*VectorStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVectorStore not implemented")
}
func (UnimplementedVectorStoreServiceServer) UpdateVectorStore(context.Context, *UpdateVectorStoreRequest) (*VectorStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVectorStore not implemented")
}
func (UnimplementedVectorStoreServiceServer) DeleteVectorStore(context.Context, *DeleteVectorStoreRequest) (*DeleteVectorStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVectorStore not implemented")
}
func (UnimplementedVectorStoreServiceServer) CreateVectorStoreFile(context.Context, *CreateVectorStoreFileRequest) (*VectorStoreFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVectorStoreFile not implemented")
}
func (UnimplementedVectorStoreServiceServer) ListVectorStoreFiles(context.Context, *ListVectorStoreFilesRequest) (*ListVectorStoreFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVectorStoreFiles not implemented")
}
func (UnimplementedVectorStoreServiceServer) GetVectorStoreFile(context.Context, *GetVectorStoreFileRequest) (*VectorStoreFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVectorStoreFile not implemented")
}
func (UnimplementedVectorStoreServiceServer) DeleteVectorStoreFile(context.Context, *DeleteVectorStoreFileRequest) (*DeleteVectorStoreFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVectorStoreFile not implemented")
}
func (UnimplementedVectorStoreServiceServer) mustEmbedUnimplementedVectorStoreServiceServer() {}

// UnsafeVectorStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VectorStoreServiceServer will
// result in compilation errors.
type UnsafeVectorStoreServiceServer interface {
	mustEmbedUnimplementedVectorStoreServiceServer()
}

func RegisterVectorStoreServiceServer(s grpc.ServiceRegistrar, srv VectorStoreServiceServer) {
	s.RegisterService(&VectorStoreService_ServiceDesc, srv)
}

func _VectorStoreService_CreateVectorStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVectorStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorStoreServiceServer).CreateVectorStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.vector_store.v1.VectorStoreService/CreateVectorStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorStoreServiceServer).CreateVectorStore(ctx, req.(*CreateVectorStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorStoreService_ListVectorStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVectorStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorStoreServiceServer).ListVectorStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.vector_store.v1.VectorStoreService/ListVectorStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorStoreServiceServer).ListVectorStores(ctx, req.(*ListVectorStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorStoreService_GetVectorStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVectorStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorStoreServiceServer).GetVectorStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.vector_store.v1.VectorStoreService/GetVectorStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorStoreServiceServer).GetVectorStore(ctx, req.(*GetVectorStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorStoreService_UpdateVectorStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVectorStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorStoreServiceServer).UpdateVectorStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.vector_store.v1.VectorStoreService/UpdateVectorStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorStoreServiceServer).UpdateVectorStore(ctx, req.(*UpdateVectorStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorStoreService_DeleteVectorStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVectorStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorStoreServiceServer).DeleteVectorStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.vector_store.v1.VectorStoreService/DeleteVectorStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorStoreServiceServer).DeleteVectorStore(ctx, req.(*DeleteVectorStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorStoreService_CreateVectorStoreFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVectorStoreFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorStoreServiceServer).CreateVectorStoreFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.vector_store.v1.VectorStoreService/CreateVectorStoreFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorStoreServiceServer).CreateVectorStoreFile(ctx, req.(*CreateVectorStoreFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorStoreService_ListVectorStoreFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVectorStoreFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorStoreServiceServer).ListVectorStoreFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.vector_store.v1.VectorStoreService/ListVectorStoreFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorStoreServiceServer).ListVectorStoreFiles(ctx, req.(*ListVectorStoreFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorStoreService_GetVectorStoreFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVectorStoreFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorStoreServiceServer).GetVectorStoreFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.vector_store.v1.VectorStoreService/GetVectorStoreFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorStoreServiceServer).GetVectorStoreFile(ctx, req.(*GetVectorStoreFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorStoreService_DeleteVectorStoreFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVectorStoreFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorStoreServiceServer).DeleteVectorStoreFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.vector_store.v1.VectorStoreService/DeleteVectorStoreFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorStoreServiceServer).DeleteVectorStoreFile(ctx, req.(*DeleteVectorStoreFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VectorStoreService_ServiceDesc is the grpc.ServiceDesc for VectorStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VectorStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llmoperator.vector_store.v1.VectorStoreService",
	HandlerType: (*VectorStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVectorStore",
			Handler:    _VectorStoreService_CreateVectorStore_Handler,
		},
		{
			MethodName: "ListVectorStores",
			Handler:    _VectorStoreService_ListVectorStores_Handler,
		},
		{
			MethodName: "GetVectorStore",
			Handler:    _VectorStoreService_GetVectorStore_Handler,
		},
		{
			MethodName: "UpdateVectorStore",
			Handler:    _VectorStoreService_UpdateVectorStore_Handler,
		},
		{
			MethodName: "DeleteVectorStore",
			Handler:    _VectorStoreService_DeleteVectorStore_Handler,
		},
		{
			MethodName: "CreateVectorStoreFile",
			Handler:    _VectorStoreService_CreateVectorStoreFile_Handler,
		},
		{
			MethodName: "ListVectorStoreFiles",
			Handler:    _VectorStoreService_ListVectorStoreFiles_Handler,
		},
		{
			MethodName: "GetVectorStoreFile",
			Handler:    _VectorStoreService_GetVectorStoreFile_Handler,
		},
		{
			MethodName: "DeleteVectorStoreFile",
			Handler:    _VectorStoreService_DeleteVectorStoreFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/vector_store.proto",
}

// VectorStoreInternalServiceClient is the client API for VectorStoreInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VectorStoreInternalServiceClient interface {
	SearchVectorStore(ctx context.Context, in *SearchVectorStoreRequest, opts ...grpc.CallOption) (*SearchVectorStoreResponse, error)
}

type vectorStoreInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVectorStoreInternalServiceClient(cc grpc.ClientConnInterface) VectorStoreInternalServiceClient {
	return &vectorStoreInternalServiceClient{cc}
}

func (c *vectorStoreInternalServiceClient) SearchVectorStore(ctx context.Context, in *SearchVectorStoreRequest, opts ...grpc.CallOption) (*SearchVectorStoreResponse, error) {
	out := new(SearchVectorStoreResponse)
	err := c.cc.Invoke(ctx, "/llmoperator.vector_store.v1.VectorStoreInternalService/SearchVectorStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VectorStoreInternalServiceServer is the server API for VectorStoreInternalService service.
// All implementations must embed UnimplementedVectorStoreInternalServiceServer
// for forward compatibility
type VectorStoreInternalServiceServer interface {
	SearchVectorStore(context.Context, *SearchVectorStoreRequest) (*SearchVectorStoreResponse, error)
	mustEmbedUnimplementedVectorStoreInternalServiceServer()
}

// UnimplementedVectorStoreInternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVectorStoreInternalServiceServer struct {
}

func (UnimplementedVectorStoreInternalServiceServer) SearchVectorStore(context.Context, *SearchVectorStoreRequest) (*SearchVectorStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVectorStore not implemented")
}
func (UnimplementedVectorStoreInternalServiceServer) mustEmbedUnimplementedVectorStoreInternalServiceServer() {
}

// UnsafeVectorStoreInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VectorStoreInternalServiceServer will
// result in compilation errors.
type UnsafeVectorStoreInternalServiceServer interface {
	mustEmbedUnimplementedVectorStoreInternalServiceServer()
}

func RegisterVectorStoreInternalServiceServer(s grpc.ServiceRegistrar, srv VectorStoreInternalServiceServer) {
	s.RegisterService(&VectorStoreInternalService_ServiceDesc, srv)
}

func _VectorStoreInternalService_SearchVectorStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVectorStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorStoreInternalServiceServer).SearchVectorStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmoperator.vector_store.v1.VectorStoreInternalService/SearchVectorStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorStoreInternalServiceServer).SearchVectorStore(ctx, req.(*SearchVectorStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VectorStoreInternalService_ServiceDesc is the grpc.ServiceDesc for VectorStoreInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VectorStoreInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llmoperator.vector_store.v1.VectorStoreInternalService",
	HandlerType: (*VectorStoreInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchVectorStore",
			Handler:    _VectorStoreInternalService_SearchVectorStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/vector_store.proto",
}
